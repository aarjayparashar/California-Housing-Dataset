# -*- coding: utf-8 -*-
"""House_Price_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bSdUzdd2kQBtIn-SH7TqnHdVMy7aLN53
"""

# Import dependencies.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""**Data Preparation and Cleaning**"""

# Import housing price dataset.
from sklearn.datasets import fetch_california_housing
house_price_dataset = fetch_california_housing()

house_price_dataset

# Loading the dataset to a Pandas DataFrame.
df = pd.DataFrame(house_price_dataset.data, columns=house_price_dataset.feature_names)

df['price'] = house_price_dataset.target

df

df.shape

# Check the DataFrame.
df.head(5)

df.describe(include=np.number)

df.hist('price')

# Check for missing values.
df.isna().sum()

# Correlation data.
correlation = df.corr()
print(correlation)

# Heatmap to understand correlation data.
plt.figure(figsize = (10, 10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""**Preparing training and test sets.**"""

# Splitting data and target.
X = df.drop('price', axis=1)
Y = df['price']

print(X)
print(Y)

# Splitting data into training and test sets.
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print({'X_shape': X.shape,
      'X_train_shape': X_train.shape,
      'X_test_shape': X_test.shape,
      'Y_train_shape': Y_train.shape,
      'Y_test_shape': Y_test.shape})

"""**Model Training**

1. XGBoost Regressor
"""

# Loading the model.
model = XGBRegressor()

# Model Training
model.fit(X_train, Y_train)

"""**Model Evaluation**"""

# Prediction on test data.
XGB_test_predict = model.predict(X_test)

# R squared error
r_square_error = metrics.r2_score(Y_test, XGB_predict)

# Mean Absolute error
mean_abs_error = metrics.mean_absolute_error(Y_test, XGB_predict)

print("R Squared Error: ", r_square_error)
print("Mean Absolute Error: ", mean_abs_error)

# Visualizing the actual and predicted prices on training data.
plt.scatter(Y_test, XGB_test_predict)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices (Test Data)')
plt.show()

# Training Error
XGB_train_predict = model.predict(X_train)

# R squared error
r_square_error = metrics.r2_score(Y_train, XGB_train_predict)

# Mean Absolute error
mean_abs_error = metrics.mean_absolute_error(Y_train, XGB_train_predict)

print("R Squared Error: ", r_square_error)
print("Mean Absolute Error: ", mean_abs_error)

# Visualizing the actual and predicted prices on training data.
plt.scatter(Y_train, XGB_train_predict)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices (Training Data)')
plt.show()